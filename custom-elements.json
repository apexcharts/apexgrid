{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ApexGrid",
          "declaration": {
            "name": "default",
            "module": "./components/grid.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseOperands",
          "declaration": {
            "name": "BaseOperands",
            "module": "./operations/filter/operands/base.js"
          }
        },
        {
          "kind": "js",
          "name": "BooleanOperands",
          "declaration": {
            "name": "BooleanOperands",
            "module": "./operations/filter/operands/boolean.js"
          }
        },
        {
          "kind": "js",
          "name": "NumberOperands",
          "declaration": {
            "name": "NumberOperands",
            "module": "./operations/filter/operands/number.js"
          }
        },
        {
          "kind": "js",
          "name": "StringOperands",
          "declaration": {
            "name": "StringOperands",
            "module": "./operations/filter/operands/string.js"
          }
        },
        {
          "kind": "js",
          "name": "FilterState",
          "declaration": {
            "name": "FilterState",
            "module": "./operations/filter/state.js"
          }
        },
        {
          "kind": "js",
          "name": "FilterExpressionTree",
          "declaration": {
            "name": "FilterExpressionTree",
            "module": "./operations/filter/tree.js"
          }
        },
        {
          "kind": "js",
          "name": "SortExpression",
          "declaration": {
            "name": "SortExpression",
            "module": "./operations/sort/types.js"
          }
        },
        {
          "kind": "js",
          "name": "SortingDirection",
          "declaration": {
            "name": "SortingDirection",
            "module": "./operations/sort/types.js"
          }
        },
        {
          "kind": "js",
          "name": "SortState",
          "declaration": {
            "name": "SortState",
            "module": "./operations/sort/types.js"
          }
        },
        {
          "kind": "js",
          "name": "FilterCriteria",
          "declaration": {
            "name": "FilterCriteria",
            "module": "./operations/filter/types.js"
          }
        },
        {
          "kind": "js",
          "name": "FilterExpression",
          "declaration": {
            "name": "FilterExpression",
            "module": "./operations/filter/types.js"
          }
        },
        {
          "kind": "js",
          "name": "OperandKeys",
          "declaration": {
            "name": "OperandKeys",
            "module": "./operations/filter/types.js"
          }
        },
        {
          "kind": "js",
          "name": "FilterOperation",
          "declaration": {
            "name": "FilterOperation",
            "module": "./operations/filter/types.js"
          }
        },
        {
          "kind": "js",
          "name": "FilterOperationLogic",
          "declaration": {
            "name": "FilterOperationLogic",
            "module": "./operations/filter/types.js"
          }
        },
        {
          "kind": "js",
          "name": "ApexCellContext",
          "declaration": {
            "name": "ApexCellContext",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "ApexHeaderContext",
          "declaration": {
            "name": "ApexHeaderContext",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "ColumnConfig",
          "declaration": {
            "name": "ColumnConfig",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "ColumnFilterConfig",
          "declaration": {
            "name": "ColumnFilterConfig",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "GridSortingConfig",
          "declaration": {
            "name": "GridSortingConfig",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "ColumnSortConfig",
          "declaration": {
            "name": "ColumnSortConfig",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "DataType",
          "declaration": {
            "name": "DataType",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "Keys",
          "declaration": {
            "name": "Keys",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "GridRemoteConfig",
          "declaration": {
            "name": "GridRemoteConfig",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "RemoteFilterHook",
          "declaration": {
            "name": "RemoteFilterHook",
            "module": "./internal/types.js"
          }
        },
        {
          "kind": "js",
          "name": "RemoteSortHook",
          "declaration": {
            "name": "RemoteSortHook",
            "module": "./internal/types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApexGridCell",
          "members": [
            {
              "kind": "field",
              "name": "is",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T[keyof T]"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "ColumnConfig<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "row",
              "type": {
                "text": "ApexGridRow<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "ApexCellContext<T>"
              },
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ApexGridCell",
            "module": "src/components/cell.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "ApexGridCell",
            "module": "src/components/cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/filter-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApexFilterRow",
          "members": [
            {
              "kind": "field",
              "name": "is",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "StateController<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "isNumeric",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "filterController",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "condition",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IgcInputComponent"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "conditionElement",
              "type": {
                "text": "IgcIconComponent"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "IgcDropdownComponent"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "ColumnConfig<T>"
              },
              "privacy": "public",
              "default": "DEFAULT_COLUMN_CONFIG"
            },
            {
              "kind": "field",
              "name": "expression",
              "type": {
                "text": "FilterExpression<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "#setDefaultExpression"
            },
            {
              "kind": "method",
              "name": "#removeExpression",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#show"
            },
            {
              "kind": "method",
              "name": "#handleConditionChanged",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<IgcDropdownItemComponent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleKeydown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleResetClick"
            },
            {
              "kind": "method",
              "name": "#openDropdownList"
            },
            {
              "kind": "method",
              "name": "activeChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "#chipCriteriaFor",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#chipSelectFor",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#chipRemoveFor",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCriteriaButton",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "expr",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderExpressionChip",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "ExpressionChipProps<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderActiveChips",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderFilterActions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderDropdown",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderDropdownTarget",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderInputArea",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderActiveState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderInactiveChips",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "ColumnConfig<T>"
                  }
                },
                {
                  "name": "state",
                  "type": {
                    "text": "FilterExpressionTree<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderFilterState",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "ColumnConfig<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInactiveState",
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ApexFilterRow",
            "module": "src/components/filter-row.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "ApexFilterRow",
            "module": "src/components/filter-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/grid-body.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApexGridBody",
          "members": [
            {
              "kind": "field",
              "name": "is",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "scroller",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true"
            }
          ],
          "superclass": {
            "name": "LitVirtualizer",
            "package": "@lit-labs/virtualizer"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ApexGridBody",
            "module": "src/components/grid-body.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "ApexGridBody",
            "module": "src/components/grid-body.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApexGrid",
          "members": [
            {
              "kind": "field",
              "name": "is",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "stateController",
              "privacy": "protected",
              "default": "new StateController<T>(this)"
            },
            {
              "kind": "field",
              "name": "DOM",
              "privacy": "protected",
              "default": "new GridDOMController<T>(this, this.stateController)"
            },
            {
              "kind": "field",
              "name": "dataController",
              "privacy": "protected",
              "default": "new DataOperationsController<T>(this)"
            },
            {
              "kind": "field",
              "name": "rowRenderer",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "stateProvider",
              "privacy": "protected",
              "default": "new ContextProvider(this, gridStateContext, this.stateController)"
            },
            {
              "kind": "field",
              "name": "bodyElement",
              "type": {
                "text": "ApexGridBody"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "headerRow",
              "type": {
                "text": "ApexGridHeaderRow<T>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "filterRow",
              "type": {
                "text": "ApexFilterRow<T>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "dataState",
              "type": {
                "text": "Array<T>"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_rows",
              "type": {
                "text": "NodeListOf<ApexGridRow<T>>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<ColumnConfig<T>>"
              },
              "privacy": "public",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Array<T>"
              },
              "privacy": "public",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "sortingConfig",
              "type": {
                "text": "GridSortingConfig"
              },
              "privacy": "public",
              "default": "{\n    multiple: true,\n    triState: true,\n  }"
            },
            {
              "kind": "field",
              "name": "remoteConfig",
              "type": {
                "text": "GridRemoteConfig<T> | undefined"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "sortExpressions",
              "type": {
                "text": "SortExpression<T>[]"
              },
              "privacy": "public",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "filterExpressions",
              "type": {
                "text": "FilterExpression<T>[]"
              },
              "privacy": "public",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rows",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "totalItems",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "watchSortExpressions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "watchFilterExpressions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "watchColumns",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "ColumnConfig<T>[]"
                  }
                },
                {
                  "name": "newConfig",
                  "default": "[]",
                  "type": {
                    "text": "ColumnConfig<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dataChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "pipeline",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "filter",
              "privacy": "public",
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "FilterExpression<T> | FilterExpression<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sort",
              "privacy": "public",
              "parameters": [
                {
                  "name": "expressions",
                  "type": {
                    "text": "Partial<SortExpression<T>> | Partial<SortExpression<T>>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getColumn",
              "privacy": "public",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "Keys<T> | number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateColumn",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                },
                {
                  "name": "config",
                  "type": {
                    "text": "Partial<ColumnConfig<T>>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "bodyClickHandler",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "bodyKeydownHandler",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeaderRow",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderBody",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderFilterRow",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterBase",
                "module": "src/internal/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterBase",
                "module": "src/internal/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterBase",
                "module": "src/internal/mixins/event-emitter.ts"
              }
            }
          ],
          "superclass": {
            "name": "EventEmitterBase",
            "module": "/src/internal/mixins/event-emitter.js"
          },
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterBase",
                "module": "src/internal/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ApexGrid",
            "module": "src/components/grid.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "ApexGrid",
            "module": "src/components/grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/header-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApexGridHeaderRow",
          "members": [
            {
              "kind": "field",
              "name": "is",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_headers",
              "type": {
                "text": "NodeListOf<ApexGridHeader<T>>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "StateController<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<ColumnConfig<T>>"
              },
              "privacy": "public",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "headers",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "#activeFilterColumn",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ApexGridHeaderRow",
            "module": "src/components/header-row.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "ApexGridHeaderRow",
            "module": "src/components/header-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApexGridHeader",
          "members": [
            {
              "kind": "field",
              "name": "is",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "ApexHeaderContext<T>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "isSortable",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "resizeController",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "StateController<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "ColumnConfig<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "#addResizeEventHandlers"
            },
            {
              "kind": "method",
              "name": "#handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#handleResize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleResizeStart",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#handlePointerLost",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleAutosize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSortPart",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderContentPart",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderResizePart",
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ApexGridHeader",
            "module": "src/components/header.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "ApexGridHeader",
            "module": "src/components/header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApexGridRow",
          "members": [
            {
              "kind": "field",
              "name": "is",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_cells",
              "type": {
                "text": "NodeListOf<ApexGridCell<T>>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "T"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<ColumnConfig<T>>"
              },
              "privacy": "public",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "cells",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "activeNode",
              "type": {
                "text": "ActiveNode<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ApexGridRow",
            "module": "src/components/row.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "ApexGridRow",
            "module": "src/components/row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/data-operation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DataOperationsController",
          "members": [
            {
              "kind": "field",
              "name": "sorting",
              "privacy": "protected",
              "default": "new SortDataOperation<T>()"
            },
            {
              "kind": "field",
              "name": "filtering",
              "privacy": "protected",
              "default": "new FilterDataOperation<T>()"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "hasRemoteSort",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "hasRemoteFilter",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "remoteFilter",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "remoteSort",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "T[]"
                  }
                },
                {
                  "name": "state",
                  "type": {
                    "text": "StateController<T>"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataOperationsController",
          "declaration": {
            "name": "DataOperationsController",
            "module": "src/controllers/data-operation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/dom.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridDOMController",
          "members": [
            {
              "kind": "field",
              "name": "virtualBody",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "columnSizes",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "public",
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setScrollOffset",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "setGridColumnSizes",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getActiveRowStyles",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridDOMController",
          "declaration": {
            "name": "GridDOMController",
            "module": "src/controllers/dom.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/filter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FilterController",
          "members": [
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "FilterState<T>"
              },
              "privacy": "public",
              "default": "new FilterState()"
            },
            {
              "kind": "field",
              "name": "filterRow",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "#emitFilteringEvent",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#emitFilteredEvent",
              "parameters": [
                {
                  "name": "detail",
                  "type": {
                    "text": "FilterExpressionTree<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_filter",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T> | FilterExpression<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "optional": true,
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setActiveColumn",
              "privacy": "public",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "ColumnConfig<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDefaultExpression",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "FilterExpression<T>"
                }
              },
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "ColumnConfig<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeExpression",
              "privacy": "public",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "filterWithEvent",
              "privacy": "public",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "filter",
              "privacy": "public",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T> | FilterExpression<T>[]"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FilterController",
          "declaration": {
            "name": "FilterController",
            "module": "src/controllers/filter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/navigation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavigationController",
          "members": [
            {
              "kind": "field",
              "name": "handlers",
              "privacy": "protected",
              "default": "new Map(\n    Object.entries({\n      ArrowDown: this.arrowDown,\n      ArrowUp: this.arrowUp,\n      ArrowLeft: this.arrowLeft,\n      ArrowRight: this.arrowRight,\n      Home: this.home,\n      End: this.end,\n    }),\n  )"
            },
            {
              "kind": "field",
              "name": "state",
              "privacy": "protected",
              "default": "NAVIGATION_STATE"
            },
            {
              "kind": "field",
              "name": "_active",
              "privacy": "protected",
              "default": "SENTINEL_NODE"
            },
            {
              "kind": "field",
              "name": "nextNode",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "columns",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "firstColumn",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getPreviousColumn",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextColumn",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "isNotSentinel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "ActiveNode<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "home",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "ApexGridBody"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "end",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "ApexGridBody"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "arrowDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "ApexGridBody"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "arrowUp",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "ApexGridBody"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "arrowLeft",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "arrowRight",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "navigate",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "ApexGridBody"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavigationController",
          "declaration": {
            "name": "NavigationController",
            "module": "src/controllers/navigation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/resize.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ResizeController",
          "members": [
            {
              "kind": "field",
              "name": "indicatorActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "indicatorOffset",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "#maxSize",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                },
                {
                  "name": "headerWidth",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "public",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "ApexGridHeader<T>"
                  },
                  "description": "the"
                }
              ],
              "description": "Begins resizing a column by showing and positioning the resize indicator in relation to the column."
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "public",
              "description": "Stops and resets the resizing state."
            },
            {
              "kind": "method",
              "name": "resize",
              "privacy": "public",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "ColumnConfig<T>"
                  }
                },
                {
                  "name": "width",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "sizerOffset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "autosize",
              "privacy": "public",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "ColumnConfig<T>"
                  }
                },
                {
                  "name": "header",
                  "type": {
                    "text": "ApexGridHeader<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "renderIndicator",
              "privacy": "public",
              "description": "Renders the resize indicator in the grid."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ResizeController",
          "declaration": {
            "name": "ResizeController",
            "module": "src/controllers/resize.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/sort.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SortController",
          "members": [
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "SortState<T>"
              },
              "privacy": "public",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "#isMultipleSort",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#isTriStateSort",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#resolveSortOptions",
              "return": {
                "type": {
                  "text": "Partial<SortExpression<T>>"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "boolean | undefined | ColumnSortConfig<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#createDefaultExpression",
              "return": {
                "type": {
                  "text": "SortExpression<T>"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#orderBy",
              "return": {
                "type": {
                  "text": "SortingDirection"
                }
              },
              "parameters": [
                {
                  "name": "dir",
                  "optional": true,
                  "type": {
                    "text": "SortingDirection"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#emitSortingEvent",
              "parameters": [
                {
                  "name": "detail",
                  "type": {
                    "text": "SortExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#emitSortedEvent",
              "parameters": [
                {
                  "name": "detail",
                  "type": {
                    "text": "SortExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sortFromHeaderClick",
              "privacy": "public",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "ColumnConfig<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prepareExpression",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "SortExpression<T>"
                }
              },
              "parameters": [
                {
                  "name": "{ key, sort: options }",
                  "type": {
                    "text": "ColumnConfig<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "optional": true,
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_sort",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "expressions",
                  "type": {
                    "text": "SortExpression<T> | SortExpression<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sort",
              "privacy": "public",
              "parameters": [
                {
                  "name": "expressions",
                  "type": {
                    "text": "SortExpression<T> | SortExpression<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SortController",
          "declaration": {
            "name": "SortController",
            "module": "src/controllers/sort.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/state.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StateController",
          "members": [
            {
              "kind": "field",
              "name": "sorting",
              "type": {
                "text": "SortController<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "filtering",
              "type": {
                "text": "FilterController<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "navigation",
              "type": {
                "text": "NavigationController<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "resizing",
              "type": {
                "text": "ResizeController<T>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "init",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "gridStateContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StateController",
          "declaration": {
            "name": "StateController",
            "module": "src/controllers/state.ts"
          }
        },
        {
          "kind": "js",
          "name": "gridStateContext",
          "declaration": {
            "name": "gridStateContext",
            "module": "src/controllers/state.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/constants.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "PIPELINE",
          "type": {
            "text": "string"
          },
          "default": "'pipeline'"
        },
        {
          "kind": "variable",
          "name": "SORT_ICON_ASCENDING",
          "type": {
            "text": "'arrow-upward'"
          },
          "default": "'arrow-upward'"
        },
        {
          "kind": "variable",
          "name": "SORT_ICON_DESCENDING",
          "type": {
            "text": "'arrow-downward'"
          },
          "default": "'arrow-downward'"
        },
        {
          "kind": "variable",
          "name": "MIN_COL_RESIZE_WIDTH",
          "type": {
            "text": "number"
          },
          "default": "80"
        },
        {
          "kind": "variable",
          "name": "SENTINEL_NODE",
          "type": {
            "text": "Readonly<ActiveNode<any>>"
          }
        },
        {
          "kind": "variable",
          "name": "DEFAULT_COLUMN_CONFIG",
          "type": {
            "text": "ColumnConfig<any>"
          }
        },
        {
          "kind": "variable",
          "name": "NAVIGATION_STATE",
          "type": {
            "text": "Map<NavigationState, ActiveNode<any>>"
          },
          "default": "new Map([\n  ['previous', SENTINEL_NODE],\n  ['current', SENTINEL_NODE],\n])"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PIPELINE",
          "declaration": {
            "name": "PIPELINE",
            "module": "src/internal/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "SORT_ICON_ASCENDING",
          "declaration": {
            "name": "SORT_ICON_ASCENDING",
            "module": "src/internal/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "SORT_ICON_DESCENDING",
          "declaration": {
            "name": "SORT_ICON_DESCENDING",
            "module": "src/internal/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "MIN_COL_RESIZE_WIDTH",
          "declaration": {
            "name": "MIN_COL_RESIZE_WIDTH",
            "module": "src/internal/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "SENTINEL_NODE",
          "declaration": {
            "name": "SENTINEL_NODE",
            "module": "src/internal/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "DEFAULT_COLUMN_CONFIG",
          "declaration": {
            "name": "DEFAULT_COLUMN_CONFIG",
            "module": "src/internal/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "NAVIGATION_STATE",
          "declaration": {
            "name": "NAVIGATION_STATE",
            "module": "src/internal/constants.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/icon-registry.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "registerGridIcons"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "registerGridIcons",
          "declaration": {
            "name": "registerGridIcons",
            "module": "src/internal/icon-registry.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/part-map.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "partNameMap",
          "parameters": [
            {
              "name": "parts",
              "type": {
                "text": "PartNameInfo"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "partNameMap",
          "declaration": {
            "name": "partNameMap",
            "module": "src/internal/part-map.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/tags.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "GRID_TAG",
          "type": {
            "text": "'apex-grid'"
          },
          "default": "'apex-grid'"
        },
        {
          "kind": "variable",
          "name": "GRID_BODY_TAG",
          "type": {
            "text": "'apex-grid-body'"
          },
          "default": "'apex-grid-body'"
        },
        {
          "kind": "variable",
          "name": "GRID_HEADER_ROW_TAG",
          "type": {
            "text": "'apex-grid-header-row'"
          },
          "default": "'apex-grid-header-row'"
        },
        {
          "kind": "variable",
          "name": "GRID_HEADER_TAG",
          "type": {
            "text": "'apex-grid-header'"
          },
          "default": "'apex-grid-header'"
        },
        {
          "kind": "variable",
          "name": "GRID_ROW_TAG",
          "type": {
            "text": "'apex-grid-row'"
          },
          "default": "'apex-grid-row'"
        },
        {
          "kind": "variable",
          "name": "GRID_CELL_TAG",
          "type": {
            "text": "'apex-grid-cell'"
          },
          "default": "'apex-grid-cell'"
        },
        {
          "kind": "variable",
          "name": "GRID_FILTER_ROW_TAG",
          "type": {
            "text": "'apex-filter-row'"
          },
          "default": "'apex-filter-row'"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GRID_TAG",
          "declaration": {
            "name": "GRID_TAG",
            "module": "src/internal/tags.ts"
          }
        },
        {
          "kind": "js",
          "name": "GRID_BODY_TAG",
          "declaration": {
            "name": "GRID_BODY_TAG",
            "module": "src/internal/tags.ts"
          }
        },
        {
          "kind": "js",
          "name": "GRID_HEADER_ROW_TAG",
          "declaration": {
            "name": "GRID_HEADER_ROW_TAG",
            "module": "src/internal/tags.ts"
          }
        },
        {
          "kind": "js",
          "name": "GRID_HEADER_TAG",
          "declaration": {
            "name": "GRID_HEADER_TAG",
            "module": "src/internal/tags.ts"
          }
        },
        {
          "kind": "js",
          "name": "GRID_ROW_TAG",
          "declaration": {
            "name": "GRID_ROW_TAG",
            "module": "src/internal/tags.ts"
          }
        },
        {
          "kind": "js",
          "name": "GRID_CELL_TAG",
          "declaration": {
            "name": "GRID_CELL_TAG",
            "module": "src/internal/tags.ts"
          }
        },
        {
          "kind": "js",
          "name": "GRID_FILTER_ROW_TAG",
          "declaration": {
            "name": "GRID_FILTER_ROW_TAG",
            "module": "src/internal/tags.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isDefined",
          "return": {
            "type": {
              "text": "value is NonNullable<T>"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "T | null | undefined"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "normalizeCase",
          "parameters": [
            {
              "name": "string",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "caseSensitive",
              "optional": true,
              "type": {
                "text": "boolean"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "applyColumnWidths",
          "return": {
            "type": {
              "text": "StyleInfo"
            }
          },
          "parameters": [
            {
              "name": "columns",
              "type": {
                "text": "Array<ColumnConfig<T>>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "asArray",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "T | T[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getFilterOperandsFor",
          "parameters": [
            {
              "name": "column",
              "type": {
                "text": "ColumnConfig<T>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isDefined",
          "declaration": {
            "name": "isDefined",
            "module": "src/internal/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "normalizeCase",
          "declaration": {
            "name": "normalizeCase",
            "module": "src/internal/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "applyColumnWidths",
          "declaration": {
            "name": "applyColumnWidths",
            "module": "src/internal/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "asArray",
          "declaration": {
            "name": "asArray",
            "module": "src/internal/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getFilterOperandsFor",
          "declaration": {
            "name": "getFilterOperandsFor",
            "module": "src/internal/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/watch.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "watch",
          "parameters": [
            {
              "name": "propName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "WatchOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "src/internal/watch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DataOperation",
          "members": [
            {
              "kind": "method",
              "name": "resolveValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "record",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "resolveCase",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Values<T>"
                  }
                },
                {
                  "name": "caseSensitive",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "T[]"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DataOperation",
            "module": "src/operations/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/filter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FilterDataOperation",
          "members": [
            {
              "kind": "method",
              "name": "resolveFilter",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "record",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "expr",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "match",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "record",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "ands",
                  "type": {
                    "text": "FilterExpression<T>[]"
                  }
                },
                {
                  "name": "ors",
                  "type": {
                    "text": "FilterExpression<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "T[]"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "T[]"
                  }
                },
                {
                  "name": "state",
                  "type": {
                    "text": "FilterState<T>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataOperation",
                "module": "src/operations/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolveValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "record",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataOperation",
                "module": "src/operations/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolveCase",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Values<T>"
                  }
                },
                {
                  "name": "caseSensitive",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataOperation",
                "module": "src/operations/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "DataOperation",
            "module": "/src/operations/base.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FilterDataOperation",
            "module": "src/operations/filter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/sort.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SortDataOperation",
          "members": [
            {
              "kind": "field",
              "name": "orderBy",
              "privacy": "protected",
              "default": "new Map(\n    Object.entries({\n      ascending: 1,\n      descending: -1,\n    }),\n  )"
            },
            {
              "kind": "method",
              "name": "compareValues",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "first",
                  "type": {
                    "text": "Values<T>"
                  }
                },
                {
                  "name": "second",
                  "type": {
                    "text": "Values<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "compareObjects",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "first",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "second",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "expression",
                  "type": {
                    "text": "SortExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "T[]"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "T[]"
                  }
                },
                {
                  "name": "state",
                  "type": {
                    "text": "SortState<T>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataOperation",
                "module": "src/operations/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolveValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "record",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataOperation",
                "module": "src/operations/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolveCase",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Values<T>"
                  }
                },
                {
                  "name": "caseSensitive",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataOperation",
                "module": "src/operations/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "DataOperation",
            "module": "/src/operations/base.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SortDataOperation",
            "module": "src/operations/sort.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/mixins/event-emitter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventEmitterBase",
          "members": [
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventEmitterBase",
          "declaration": {
            "name": "EventEmitterBase",
            "module": "src/internal/mixins/event-emitter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/body-cell/body-cell-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/body-cell/body-cell-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/body-row/body-row-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/body-row/body-row-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/filter-row/filter-row-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/filter-row/filter-row-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/header-cell/header-cell-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/header-cell/header-cell-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/header-row/header-row.base-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/header-row/header-row.base-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/filter/state.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FilterState",
          "members": [
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "Map<Keys<T>, FilterExpressionTree<T>>"
              },
              "privacy": "protected",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "empty",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "keys",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "values",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "ands",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "ors",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "has",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "delete",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clear",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "set",
              "privacy": "public",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FilterState",
          "declaration": {
            "name": "FilterState",
            "module": "src/operations/filter/state.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/filter/tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FilterExpressionTree",
          "members": [
            {
              "kind": "field",
              "name": "operands",
              "type": {
                "text": "Array<FilterExpression<T>>"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "empty",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "length",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "all",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "ands",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "ors",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "add",
              "privacy": "public",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "remove",
              "privacy": "public",
              "parameters": [
                {
                  "name": "expression",
                  "type": {
                    "text": "FilterExpression<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "iterator",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "[Symbol.iterator]",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FilterExpressionTree",
          "declaration": {
            "name": "FilterExpressionTree",
            "module": "src/operations/filter/tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/filter/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/sort/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/filter/operands/base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseOperands",
          "members": [
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "parameters": [
                {
                  "name": "condition",
                  "type": {
                    "text": "keyof this"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "default",
              "type": {
                "text": "FilterOperation<T, Type>"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "conditions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "[Symbol.iterator]",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseOperands",
          "declaration": {
            "name": "BaseOperands",
            "module": "src/operations/filter/operands/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/filter/operands/boolean.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BooleanOperands",
          "members": [
            {
              "kind": "field",
              "name": "default",
              "type": {
                "text": "FilterOperation<T, Type>"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "all",
              "type": {
                "text": "FilterOperation<T, boolean>"
              },
              "privacy": "public",
              "default": "{\n    name: 'all',\n    unary: true,\n    logic: _ => true,\n  }"
            },
            {
              "kind": "field",
              "name": "true",
              "type": {
                "text": "FilterOperation<T, boolean>"
              },
              "privacy": "public",
              "default": "{\n    name: 'true',\n    unary: true,\n    logic: target => target === true,\n  }"
            },
            {
              "kind": "field",
              "name": "false",
              "type": {
                "text": "FilterOperation<T, boolean>"
              },
              "privacy": "public",
              "default": "{\n    name: 'false',\n    unary: true,\n    logic: target => target === false,\n  }"
            },
            {
              "kind": "field",
              "name": "empty",
              "type": {
                "text": "FilterOperation<T, boolean>"
              },
              "privacy": "public",
              "default": "{\n    name: 'empty',\n    unary: true,\n    logic: target => !isDefined(target),\n  }"
            },
            {
              "kind": "field",
              "name": "notEmpty",
              "type": {
                "text": "FilterOperation<T, boolean>"
              },
              "privacy": "public",
              "default": "{\n    name: 'nonEmpty',\n    unary: true,\n    logic: target => isDefined(target),\n  }"
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "parameters": [
                {
                  "name": "condition",
                  "type": {
                    "text": "keyof this"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "conditions",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "[Symbol.iterator]",
              "privacy": "public",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseOperands",
            "module": "/src/operations/filter/operands/base.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BooleanOperands",
          "declaration": {
            "name": "BooleanOperands",
            "module": "src/operations/filter/operands/boolean.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/filter/operands/number.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NumberOperands",
          "members": [
            {
              "kind": "field",
              "name": "default",
              "type": {
                "text": "FilterOperation<T, Type>"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "equals",
              "type": {
                "text": "FilterOperation<T, number>"
              },
              "privacy": "public",
              "default": "{\n    name: 'equals',\n    unary: false,\n    logic: (target, searchTerm) => target === searchTerm,\n  }"
            },
            {
              "kind": "field",
              "name": "doesNotEqual",
              "type": {
                "text": "FilterOperation<T, number>"
              },
              "privacy": "public",
              "default": "{\n    name: 'doesNotEqual',\n    unary: false,\n    logic: (target, searchTerm) => target !== searchTerm,\n  }"
            },
            {
              "kind": "field",
              "name": "greaterThan",
              "type": {
                "text": "FilterOperation<T, number>"
              },
              "privacy": "public",
              "default": "{\n    name: 'greaterThan',\n    unary: false,\n    logic: (target, searchTerm) => target > searchTerm,\n  }"
            },
            {
              "kind": "field",
              "name": "lessThan",
              "type": {
                "text": "FilterOperation<T, number>"
              },
              "privacy": "public",
              "default": "{\n    name: 'lessThan',\n    unary: false,\n    logic: (target, searchTerm) => target < searchTerm,\n  }"
            },
            {
              "kind": "field",
              "name": "greaterThanOrEqual",
              "type": {
                "text": "FilterOperation<T, number>"
              },
              "privacy": "public",
              "default": "{\n    name: 'greaterThanOrEqual',\n    unary: false,\n    logic: (target, searchTerm) => target >= searchTerm,\n  }"
            },
            {
              "kind": "field",
              "name": "lessThanOrEqual",
              "type": {
                "text": "FilterOperation<T, number>"
              },
              "privacy": "public",
              "default": "{\n    name: 'lessThanOrEqual',\n    unary: false,\n    logic: (target, searchTerm) => target <= searchTerm,\n  }"
            },
            {
              "kind": "field",
              "name": "empty",
              "type": {
                "text": "FilterOperation<T, number>"
              },
              "privacy": "public",
              "default": "{\n    name: 'empty',\n    unary: true,\n    logic: target => !isDefined(target) || isNaN(target),\n  }"
            },
            {
              "kind": "field",
              "name": "notEmpty",
              "type": {
                "text": "FilterOperation<T, number>"
              },
              "privacy": "public",
              "default": "{\n    name: 'notEmpty',\n    unary: true,\n    logic: target => isDefined(target) && !isNaN(target),\n  }"
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "parameters": [
                {
                  "name": "condition",
                  "type": {
                    "text": "keyof this"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "conditions",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "[Symbol.iterator]",
              "privacy": "public",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseOperands",
            "module": "/src/operations/filter/operands/base.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NumberOperands",
          "declaration": {
            "name": "NumberOperands",
            "module": "src/operations/filter/operands/number.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/operations/filter/operands/string.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StringOperands",
          "members": [
            {
              "kind": "field",
              "name": "default",
              "type": {
                "text": "FilterOperation<T, Type>"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "contains",
              "type": {
                "text": "FilterOperation<T, string>"
              },
              "privacy": "public",
              "default": "{\n    name: 'contains',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive?) =>\n      normalizeCase(target, caseSensitive).includes(normalizeCase(searchTerm, caseSensitive)),\n  }"
            },
            {
              "kind": "field",
              "name": "doesNotContain",
              "type": {
                "text": "FilterOperation<T, string>"
              },
              "privacy": "public",
              "default": "{\n    name: 'doesNotContain',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive?) =>\n      !normalizeCase(target, caseSensitive).includes(normalizeCase(searchTerm, caseSensitive)),\n  }"
            },
            {
              "kind": "field",
              "name": "startsWith",
              "type": {
                "text": "FilterOperation<T, string>"
              },
              "privacy": "public",
              "default": "{\n    name: 'startsWith',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive?) =>\n      normalizeCase(target, caseSensitive).startsWith(normalizeCase(searchTerm, caseSensitive)),\n  }"
            },
            {
              "kind": "field",
              "name": "endsWith",
              "type": {
                "text": "FilterOperation<T, string>"
              },
              "privacy": "public",
              "default": "{\n    name: 'endsWith',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive?) =>\n      normalizeCase(target, caseSensitive).endsWith(normalizeCase(searchTerm, caseSensitive)),\n  }"
            },
            {
              "kind": "field",
              "name": "equals",
              "type": {
                "text": "FilterOperation<T, string>"
              },
              "privacy": "public",
              "default": "{\n    name: 'equals',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive) =>\n      normalizeCase(target, caseSensitive) === normalizeCase(searchTerm, caseSensitive),\n  }"
            },
            {
              "kind": "field",
              "name": "doesNotEqual",
              "type": {
                "text": "FilterOperation<T, string>"
              },
              "privacy": "public",
              "default": "{\n    name: 'doesNotEqual',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive) =>\n      normalizeCase(target, caseSensitive) !== normalizeCase(searchTerm, caseSensitive),\n  }"
            },
            {
              "kind": "field",
              "name": "empty",
              "type": {
                "text": "FilterOperation<T, string>"
              },
              "privacy": "public",
              "default": "{\n    name: 'empty',\n    unary: true,\n    logic: target => !isDefined(target) || target.length < 1,\n  }"
            },
            {
              "kind": "field",
              "name": "notEmpty",
              "type": {
                "text": "FilterOperation<T, string>"
              },
              "privacy": "public",
              "default": "{\n    name: 'notEmpty',\n    unary: true,\n    logic: target => isDefined(target) && target.length > 0,\n  }"
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "parameters": [
                {
                  "name": "condition",
                  "type": {
                    "text": "keyof this"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "conditions",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "[Symbol.iterator]",
              "privacy": "public",
              "inheritedFrom": {
                "name": "BaseOperands",
                "module": "src/operations/filter/operands/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseOperands",
            "module": "/src/operations/filter/operands/base.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StringOperands",
          "declaration": {
            "name": "StringOperands",
            "module": "src/operations/filter/operands/string.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/grid/themes/light/grid.bootstrap-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/grid/themes/light/grid.bootstrap-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/grid/themes/light/grid.fluent-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/grid/themes/light/grid.fluent-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/grid/themes/light/grid.indigo-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/grid/themes/light/grid.indigo-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/grid/themes/light/grid.material-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/grid/themes/light/grid.material-styles.ts"
          }
        }
      ]
    }
  ]
}
